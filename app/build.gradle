/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'jacoco'
    id 'checkstyle'
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1-jre'
    
    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.36.0.3'

    //CUCUMBER
	testImplementation 'io.cucumber:cucumber-java:6.8.1'
    testImplementation 'io.cucumber:cucumber-junit:6.8.1'
    //testfx
    testImplementation "org.testfx:testfx-core:4.0.+"
    testImplementation "org.testfx:testfx-junit:4.0.+"    
    testImplementation "org.testfx:openjfx-monocle:jdk-11+26"

}

javafx {
    version = "11.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

application {
    // Define the main class for the application.
    mainClass = 'bookcase.App'
}


configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}   

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'bookcase', 'src/test/resources']
        }
    }
}


test {
    systemProperty 'testfx.robot', 'glass'
    systemProperty 'testfx.headless', 'true' // set false to see test running
    systemProperty 'glass.platform', 'Monocle'
    systemProperty 'monocle.platform', 'headless'
    systemProperty 'prism.order', 'sw'
    systemProperty 'prism.text', 't2k'
    systemProperty 'java.awt.headless', 'true'

    //print test results in console
    afterTest { desc, result -> 
        logger.quiet "Test: [${desc.className}] ${desc.name}, result: ${result.resultType}"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

checkstyle {
     configProperties = ["suppressionFile" : project(':').file("config/checkstyle/suppressions.xml")]
}
